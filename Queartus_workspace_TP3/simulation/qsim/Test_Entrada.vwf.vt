// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2024 19:44:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Trabajo_practico_03_Entrada_in
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Trabajo_practico_03_Entrada_in_vlg_sample_tst(
	CLK,
	P0,
	P1,
	P2,
	P3,
	P4,
	P5,
	P6,
	P7,
	P8,
	P9,
	P10,
	P11,
	P12,
	P13,
	P14,
	P15,
	sampler_tx
);
input  CLK;
input  P0;
input  P1;
input  P2;
input  P3;
input  P4;
input  P5;
input  P6;
input  P7;
input  P8;
input  P9;
input  P10;
input  P11;
input  P12;
input  P13;
input  P14;
input  P15;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or P0 or P1 or P2 or P3 or P4 or P5 or P6 or P7 or P8 or P9 or P10 or P11 or P12 or P13 or P14 or P15)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Trabajo_practico_03_Entrada_in_vlg_check_tst (
	S0,
	S1,
	S2,
	S3,
	S4,
	S5,
	S6,
	S7,
	S8,
	S9,
	S10,
	S11,
	S12,
	S13,
	S14,
	S15,
	sampler_rx
);
input  S0;
input  S1;
input  S2;
input  S3;
input  S4;
input  S5;
input  S6;
input  S7;
input  S8;
input  S9;
input  S10;
input  S11;
input  S12;
input  S13;
input  S14;
input  S15;
input sampler_rx;

reg  S0_expected;
reg  S1_expected;
reg  S2_expected;
reg  S3_expected;
reg  S4_expected;
reg  S5_expected;
reg  S6_expected;
reg  S7_expected;
reg  S8_expected;
reg  S9_expected;
reg  S10_expected;
reg  S11_expected;
reg  S12_expected;
reg  S13_expected;
reg  S14_expected;
reg  S15_expected;

reg  S0_prev;
reg  S1_prev;
reg  S2_prev;
reg  S3_prev;
reg  S4_prev;
reg  S5_prev;
reg  S6_prev;
reg  S7_prev;
reg  S8_prev;
reg  S9_prev;
reg  S10_prev;
reg  S11_prev;
reg  S12_prev;
reg  S13_prev;
reg  S14_prev;
reg  S15_prev;

reg  S0_expected_prev;
reg  S1_expected_prev;
reg  S2_expected_prev;
reg  S3_expected_prev;
reg  S4_expected_prev;
reg  S5_expected_prev;
reg  S6_expected_prev;
reg  S7_expected_prev;
reg  S8_expected_prev;
reg  S9_expected_prev;
reg  S10_expected_prev;
reg  S11_expected_prev;
reg  S12_expected_prev;
reg  S13_expected_prev;
reg  S14_expected_prev;
reg  S15_expected_prev;

reg  last_S0_exp;
reg  last_S1_exp;
reg  last_S2_exp;
reg  last_S3_exp;
reg  last_S4_exp;
reg  last_S5_exp;
reg  last_S6_exp;
reg  last_S7_exp;
reg  last_S8_exp;
reg  last_S9_exp;
reg  last_S10_exp;
reg  last_S11_exp;
reg  last_S12_exp;
reg  last_S13_exp;
reg  last_S14_exp;
reg  last_S15_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	S0_prev = S0;
	S1_prev = S1;
	S2_prev = S2;
	S3_prev = S3;
	S4_prev = S4;
	S5_prev = S5;
	S6_prev = S6;
	S7_prev = S7;
	S8_prev = S8;
	S9_prev = S9;
	S10_prev = S10;
	S11_prev = S11;
	S12_prev = S12;
	S13_prev = S13;
	S14_prev = S14;
	S15_prev = S15;
end

// update expected /o prevs

always @(trigger)
begin
	S0_expected_prev = S0_expected;
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
	S3_expected_prev = S3_expected;
	S4_expected_prev = S4_expected;
	S5_expected_prev = S5_expected;
	S6_expected_prev = S6_expected;
	S7_expected_prev = S7_expected;
	S8_expected_prev = S8_expected;
	S9_expected_prev = S9_expected;
	S10_expected_prev = S10_expected;
	S11_expected_prev = S11_expected;
	S12_expected_prev = S12_expected;
	S13_expected_prev = S13_expected;
	S14_expected_prev = S14_expected;
	S15_expected_prev = S15_expected;
end



// expected S0
initial
begin
	S0_expected = 1'bX;
end 

// expected S1
initial
begin
	S1_expected = 1'bX;
end 

// expected S2
initial
begin
	S2_expected = 1'bX;
end 

// expected S3
initial
begin
	S3_expected = 1'bX;
end 

// expected S4
initial
begin
	S4_expected = 1'bX;
end 

// expected S5
initial
begin
	S5_expected = 1'bX;
end 

// expected S6
initial
begin
	S6_expected = 1'bX;
end 

// expected S7
initial
begin
	S7_expected = 1'bX;
end 

// expected S8
initial
begin
	S8_expected = 1'bX;
end 

// expected S9
initial
begin
	S9_expected = 1'bX;
end 

// expected S10
initial
begin
	S10_expected = 1'bX;
end 

// expected S11
initial
begin
	S11_expected = 1'bX;
end 

// expected S12
initial
begin
	S12_expected = 1'bX;
end 

// expected S13
initial
begin
	S13_expected = 1'bX;
end 

// expected S14
initial
begin
	S14_expected = 1'bX;
end 

// expected S15
initial
begin
	S15_expected = 1'bX;
end 
// generate trigger
always @(S0_expected or S0 or S1_expected or S1 or S2_expected or S2 or S3_expected or S3 or S4_expected or S4 or S5_expected or S5 or S6_expected or S6 or S7_expected or S7 or S8_expected or S8 or S9_expected or S9 or S10_expected or S10 or S11_expected or S11 or S12_expected or S12 or S13_expected or S13 or S14_expected or S14 or S15_expected or S15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected S0 = %b | expected S1 = %b | expected S2 = %b | expected S3 = %b | expected S4 = %b | expected S5 = %b | expected S6 = %b | expected S7 = %b | expected S8 = %b | expected S9 = %b | expected S10 = %b | expected S11 = %b | expected S12 = %b | expected S13 = %b | expected S14 = %b | expected S15 = %b | ",S0_expected_prev,S1_expected_prev,S2_expected_prev,S3_expected_prev,S4_expected_prev,S5_expected_prev,S6_expected_prev,S7_expected_prev,S8_expected_prev,S9_expected_prev,S10_expected_prev,S11_expected_prev,S12_expected_prev,S13_expected_prev,S14_expected_prev,S15_expected_prev);
	$display("| real S0 = %b | real S1 = %b | real S2 = %b | real S3 = %b | real S4 = %b | real S5 = %b | real S6 = %b | real S7 = %b | real S8 = %b | real S9 = %b | real S10 = %b | real S11 = %b | real S12 = %b | real S13 = %b | real S14 = %b | real S15 = %b | ",S0_prev,S1_prev,S2_prev,S3_prev,S4_prev,S5_prev,S6_prev,S7_prev,S8_prev,S9_prev,S10_prev,S11_prev,S12_prev,S13_prev,S14_prev,S15_prev);
`endif
	if (
		( S0_expected_prev !== 1'bx ) && ( S0_prev !== S0_expected_prev )
		&& ((S0_expected_prev !== last_S0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S0_exp = S0_expected_prev;
	end
	if (
		( S1_expected_prev !== 1'bx ) && ( S1_prev !== S1_expected_prev )
		&& ((S1_expected_prev !== last_S1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S1_exp = S1_expected_prev;
	end
	if (
		( S2_expected_prev !== 1'bx ) && ( S2_prev !== S2_expected_prev )
		&& ((S2_expected_prev !== last_S2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S2_exp = S2_expected_prev;
	end
	if (
		( S3_expected_prev !== 1'bx ) && ( S3_prev !== S3_expected_prev )
		&& ((S3_expected_prev !== last_S3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_S3_exp = S3_expected_prev;
	end
	if (
		( S4_expected_prev !== 1'bx ) && ( S4_prev !== S4_expected_prev )
		&& ((S4_expected_prev !== last_S4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S4_expected_prev);
		$display ("     Real value = %b", S4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S4_exp = S4_expected_prev;
	end
	if (
		( S5_expected_prev !== 1'bx ) && ( S5_prev !== S5_expected_prev )
		&& ((S5_expected_prev !== last_S5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S5_expected_prev);
		$display ("     Real value = %b", S5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S5_exp = S5_expected_prev;
	end
	if (
		( S6_expected_prev !== 1'bx ) && ( S6_prev !== S6_expected_prev )
		&& ((S6_expected_prev !== last_S6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S6_expected_prev);
		$display ("     Real value = %b", S6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_S6_exp = S6_expected_prev;
	end
	if (
		( S7_expected_prev !== 1'bx ) && ( S7_prev !== S7_expected_prev )
		&& ((S7_expected_prev !== last_S7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S7_expected_prev);
		$display ("     Real value = %b", S7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S7_exp = S7_expected_prev;
	end
	if (
		( S8_expected_prev !== 1'bx ) && ( S8_prev !== S8_expected_prev )
		&& ((S8_expected_prev !== last_S8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S8_expected_prev);
		$display ("     Real value = %b", S8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S8_exp = S8_expected_prev;
	end
	if (
		( S9_expected_prev !== 1'bx ) && ( S9_prev !== S9_expected_prev )
		&& ((S9_expected_prev !== last_S9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S9_expected_prev);
		$display ("     Real value = %b", S9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S9_exp = S9_expected_prev;
	end
	if (
		( S10_expected_prev !== 1'bx ) && ( S10_prev !== S10_expected_prev )
		&& ((S10_expected_prev !== last_S10_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S10_expected_prev);
		$display ("     Real value = %b", S10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_S10_exp = S10_expected_prev;
	end
	if (
		( S11_expected_prev !== 1'bx ) && ( S11_prev !== S11_expected_prev )
		&& ((S11_expected_prev !== last_S11_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S11_expected_prev);
		$display ("     Real value = %b", S11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_S11_exp = S11_expected_prev;
	end
	if (
		( S12_expected_prev !== 1'bx ) && ( S12_prev !== S12_expected_prev )
		&& ((S12_expected_prev !== last_S12_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S12_expected_prev);
		$display ("     Real value = %b", S12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_S12_exp = S12_expected_prev;
	end
	if (
		( S13_expected_prev !== 1'bx ) && ( S13_prev !== S13_expected_prev )
		&& ((S13_expected_prev !== last_S13_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S13_expected_prev);
		$display ("     Real value = %b", S13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_S13_exp = S13_expected_prev;
	end
	if (
		( S14_expected_prev !== 1'bx ) && ( S14_prev !== S14_expected_prev )
		&& ((S14_expected_prev !== last_S14_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S14_expected_prev);
		$display ("     Real value = %b", S14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_S14_exp = S14_expected_prev;
	end
	if (
		( S15_expected_prev !== 1'bx ) && ( S15_prev !== S15_expected_prev )
		&& ((S15_expected_prev !== last_S15_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S15_expected_prev);
		$display ("     Real value = %b", S15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_S15_exp = S15_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Trabajo_practico_03_Entrada_in_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg P0;
reg P1;
reg P2;
reg P3;
reg P4;
reg P5;
reg P6;
reg P7;
reg P8;
reg P9;
reg P10;
reg P11;
reg P12;
reg P13;
reg P14;
reg P15;
// wires                                               
wire S0;
wire S1;
wire S2;
wire S3;
wire S4;
wire S5;
wire S6;
wire S7;
wire S8;
wire S9;
wire S10;
wire S11;
wire S12;
wire S13;
wire S14;
wire S15;

wire sampler;                             

// assign statements (if any)                          
Trabajo_practico_03_Entrada_in i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.P0(P0),
	.P1(P1),
	.P2(P2),
	.P3(P3),
	.P4(P4),
	.P5(P5),
	.P6(P6),
	.P7(P7),
	.P8(P8),
	.P9(P9),
	.P10(P10),
	.P11(P11),
	.P12(P12),
	.P13(P13),
	.P14(P14),
	.P15(P15),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7),
	.S8(S8),
	.S9(S9),
	.S10(S10),
	.S11(S11),
	.S12(S12),
	.S13(S13),
	.S14(S14),
	.S15(S15)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #299500 1'b1;
	CLK = #299500 1'b0;
	CLK = #299500 1'b1;
end 

// P0
initial
begin
	P0 = 1'b1;
end 

// P1
initial
begin
	P1 = 1'b0;
end 

// P2
initial
begin
	P2 = 1'b1;
end 

// P3
initial
begin
	P3 = 1'b0;
end 

// P4
initial
begin
	P4 = 1'b1;
end 

// P5
initial
begin
	P5 = 1'b0;
end 

// P6
initial
begin
	P6 = 1'b1;
end 

// P7
initial
begin
	P7 = 1'b0;
end 

// P8
initial
begin
	P8 = 1'b1;
end 

// P9
initial
begin
	P9 = 1'b0;
end 

// P10
initial
begin
	P10 = 1'b1;
end 

// P11
initial
begin
	P11 = 1'b0;
end 

// P12
initial
begin
	P12 = 1'b1;
end 

// P13
initial
begin
	P13 = 1'b0;
end 

// P14
initial
begin
	P14 = 1'b1;
end 

// P15
initial
begin
	P15 = 1'b0;
end 

Trabajo_practico_03_Entrada_in_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.P0(P0),
	.P1(P1),
	.P2(P2),
	.P3(P3),
	.P4(P4),
	.P5(P5),
	.P6(P6),
	.P7(P7),
	.P8(P8),
	.P9(P9),
	.P10(P10),
	.P11(P11),
	.P12(P12),
	.P13(P13),
	.P14(P14),
	.P15(P15),
	.sampler_tx(sampler)
);

Trabajo_practico_03_Entrada_in_vlg_check_tst tb_out(
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7),
	.S8(S8),
	.S9(S9),
	.S10(S10),
	.S11(S11),
	.S12(S12),
	.S13(S13),
	.S14(S14),
	.S15(S15),
	.sampler_rx(sampler)
);
endmodule

