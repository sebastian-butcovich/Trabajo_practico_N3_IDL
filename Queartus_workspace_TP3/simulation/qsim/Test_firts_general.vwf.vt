// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2024 13:08:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Modulo_IN_mas_Modulo_Estado
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Modulo_IN_mas_Modulo_Estado_vlg_sample_tst(
	clk,
	Dato,
	m1_m2,
	SH_LD,
	sampler_tx
);
input  clk;
input [15:0] Dato;
input  m1_m2;
input  SH_LD;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Dato or m1_m2 or SH_LD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Modulo_IN_mas_Modulo_Estado_vlg_check_tst (
	aux,
	Memoria_01,
	Memoria_02,
	sampler_rx
);
input  aux;
input  Memoria_01;
input  Memoria_02;
input sampler_rx;

reg  aux_expected;
reg  Memoria_01_expected;
reg  Memoria_02_expected;

reg  aux_prev;
reg  Memoria_01_prev;
reg  Memoria_02_prev;

reg  aux_expected_prev;
reg  Memoria_01_expected_prev;
reg  Memoria_02_expected_prev;

reg  last_aux_exp;
reg  last_Memoria_01_exp;
reg  last_Memoria_02_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	aux_prev = aux;
	Memoria_01_prev = Memoria_01;
	Memoria_02_prev = Memoria_02;
end

// update expected /o prevs

always @(trigger)
begin
	aux_expected_prev = aux_expected;
	Memoria_01_expected_prev = Memoria_01_expected;
	Memoria_02_expected_prev = Memoria_02_expected;
end



// expected Memoria_02
initial
begin
	Memoria_02_expected = 1'bX;
end 

// expected Memoria_01
initial
begin
	Memoria_01_expected = 1'bX;
end 

// expected aux
initial
begin
	aux_expected = 1'bX;
end 
// generate trigger
always @(aux_expected or aux or Memoria_01_expected or Memoria_01 or Memoria_02_expected or Memoria_02)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aux = %b | expected Memoria_01 = %b | expected Memoria_02 = %b | ",aux_expected_prev,Memoria_01_expected_prev,Memoria_02_expected_prev);
	$display("| real aux = %b | real Memoria_01 = %b | real Memoria_02 = %b | ",aux_prev,Memoria_01_prev,Memoria_02_prev);
`endif
	if (
		( aux_expected_prev !== 1'bx ) && ( aux_prev !== aux_expected_prev )
		&& ((aux_expected_prev !== last_aux_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_expected_prev);
		$display ("     Real value = %b", aux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_exp = aux_expected_prev;
	end
	if (
		( Memoria_01_expected_prev !== 1'bx ) && ( Memoria_01_prev !== Memoria_01_expected_prev )
		&& ((Memoria_01_expected_prev !== last_Memoria_01_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Memoria_01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Memoria_01_expected_prev);
		$display ("     Real value = %b", Memoria_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Memoria_01_exp = Memoria_01_expected_prev;
	end
	if (
		( Memoria_02_expected_prev !== 1'bx ) && ( Memoria_02_prev !== Memoria_02_expected_prev )
		&& ((Memoria_02_expected_prev !== last_Memoria_02_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Memoria_02 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Memoria_02_expected_prev);
		$display ("     Real value = %b", Memoria_02_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Memoria_02_exp = Memoria_02_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Modulo_IN_mas_Modulo_Estado_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] Dato;
reg m1_m2;
reg SH_LD;
// wires                                               
wire aux;
wire Memoria_01;
wire Memoria_02;

wire sampler;                             

// assign statements (if any)                          
Modulo_IN_mas_Modulo_Estado i1 (
// port map - connection between master ports and signals/registers   
	.aux(aux),
	.clk(clk),
	.Dato(Dato),
	.m1_m2(m1_m2),
	.Memoria_01(Memoria_01),
	.Memoria_02(Memoria_02),
	.SH_LD(SH_LD)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// Dato[ 15 ]
initial
begin
	Dato[15] = 1'b1;
end 
// Dato[ 14 ]
initial
begin
	Dato[14] = 1'b0;
end 
// Dato[ 13 ]
initial
begin
	Dato[13] = 1'b1;
end 
// Dato[ 12 ]
initial
begin
	Dato[12] = 1'b0;
end 
// Dato[ 11 ]
initial
begin
	Dato[11] = 1'b1;
end 
// Dato[ 10 ]
initial
begin
	Dato[10] = 1'b0;
end 
// Dato[ 9 ]
initial
begin
	Dato[9] = 1'b1;
end 
// Dato[ 8 ]
initial
begin
	Dato[8] = 1'b0;
end 
// Dato[ 7 ]
initial
begin
	Dato[7] = 1'b1;
end 
// Dato[ 6 ]
initial
begin
	Dato[6] = 1'b0;
end 
// Dato[ 5 ]
initial
begin
	Dato[5] = 1'b1;
end 
// Dato[ 4 ]
initial
begin
	Dato[4] = 1'b0;
end 
// Dato[ 3 ]
initial
begin
	Dato[3] = 1'b1;
end 
// Dato[ 2 ]
initial
begin
	Dato[2] = 1'b0;
end 
// Dato[ 1 ]
initial
begin
	Dato[1] = 1'b1;
end 
// Dato[ 0 ]
initial
begin
	Dato[0] = 1'b0;
end 

// m1_m2
initial
begin
	m1_m2 = 1'b0;
end 

// SH_LD
initial
begin
	SH_LD = 1'b0;
	SH_LD = #350000 1'b1;
	SH_LD = #350000 1'b0;
end 

Modulo_IN_mas_Modulo_Estado_vlg_sample_tst tb_sample (
	.clk(clk),
	.Dato(Dato),
	.m1_m2(m1_m2),
	.SH_LD(SH_LD),
	.sampler_tx(sampler)
);

Modulo_IN_mas_Modulo_Estado_vlg_check_tst tb_out(
	.aux(aux),
	.Memoria_01(Memoria_01),
	.Memoria_02(Memoria_02),
	.sampler_rx(sampler)
);
endmodule

